/// Creating Snake Game Part 2 ///
________________________________________________________________________________
#Class Inheritance 
class Animal:
def __init__(self):
  self.num_eyes = 2

def breathe(self):
  print("Inhale and Exhale")


class Fish(Animal): #Here Animal Is A SUPER CLASS
    
    def __init__(self):
      super().__init__()

    def breathe(self):
      super().breathe()
      print("UnderWater")

    def swin(self):
      print("moving in water")

fish = Fish()
fish.breathe() ------> "Inhale and Exhale" + "UnderWater"
_______________________________________________________________________________________________________
// Slicing List or Tuples //
list = [ a ,b , c ,d ,e ,f ,g]
list_c_to_e = list[2:5]

for better understanding
 a  ,  b  ,  c  ,  d  ,  e  ,  f  ,  g
|     |     |     |     |     |     |
0     1     2     3     4     5     6

so 2 to 5 are extracted or sliced from this list.....

#Reversing a list
list = [ 0 , 1 , 2 , 3 , 4 , 5 , 6]
reverse_list = list[::-1] -----> [ 6 , 5 , 4 , 3 , 2 , 1 , 0]

skip_2_items = list[::2] -----> [ 0 , 2 , 4 , 6]

________________________________________________________________________________________________________________________________
#Food Class
from turtle import Turtle
import random

class Food(Turtle):

    def __init__(self):
        super().__init__()
        self.shape("circle")
        self.penup()
        self.shapesize(stretch_wid=10 , stretch_len=10)
        self.color("blue")
        self.speed("fastest")
        self.refresh()

    def refresh(self):
        random_x = random.randint(-280, 280)
        random_y = random.randint(-280, 280)
        self.goto(x=random_x, y=random_y)

______________________________________________________________________________________________________________________________________
# Scoreboard Class
from turtle import Turtle

ALIGNMENT = 'center'
FONT = ("courier", 16, "normal")

class Scoreboard(Turtle):
    def __init__(self):
        super().__init__()
        self.score = 0
        self.penup()
        self.goto(0,270)
        self.hideturtle()
        self.color("white")

    def game_over(self):
        self.goto(0,0)
        self.write("GAME OVER" , align=ALIGNMENT , font=FONT)

    def update_score(self):
        self.clear()
        self.write(f"Score: {self.score}", align=ALIGNMENT, font=FONT)

    def increase_score(self):
        self.score += 1
        self.update_score()
_____________________________________________________________________________________________________
#Snake Class
from turtle import Turtle

MOVE_DISTANCE = 5

class Snake:
    def __init__(self):
        self.segments = []
        starting_position = [(0, 0), (-20, 0), (-40, 0)]
        for position in starting_position:
            self.add_segment(position)
        self.head = self.segments[0]


    def add_segment(self , position):
        segment = Turtle("square")
        segment.penup()
        segment.color("white")
        segment.goto(position)
        self.segments.append(segment)

    def extend(self):
        self.add_segment(self.segments[-1].position())


    def move(self):
        for seg_num in range(len(self.segments) - 1, 0, -1):
            new_x = self.segments[seg_num - 1].xcor()
            new_y = self.segments[seg_num - 1].ycor()
            self.segments[seg_num].goto(new_x, new_y)
          self.segments[0].fd(MOVE_DISTANCE)


    def up(self):
        if self.segments[0].heading() != 270:
            self.segments[0].setheading(90)


    def down(self):
        if self.segments[0].heading() != 90:
            self.segments[0].setheading(270)


    def left(self):
        if self.segments[0].heading() != 0:
            self.segments[0].setheading(180)


    def right(self):
        if self.segments[0].heading() != 180:
            self.segments[0].setheading(0)

__________________________________________________________________________________________
#Main File with all classes imported

from email.header import Header
from turtle import Screen , Turtle
import time
from snake import Snake
from food import Food
from scoreboard import Scoreboard

#Screen Setup
screen = Screen()
screen.setup(width= 600 , height= 600)
screen.bgcolor("black")
screen.title("The Legendary Snake Game")
screen.tracer(0)

#All Classes and Objects
snake = Snake()
food = Food()
scoreboard = Scoreboard()

#Keyboard Inputs on Screens
screen.listen()
screen.onkey(fun=snake.up , key="Up")
screen.onkey(fun=snake.down, key= "Down")
screen.onkey(fun=snake.left,key="Left")
screen.onkey(fun=snake.right,key="Right")

is_game_on = True

current_score = 0
scoreboard.update_score()

while is_game_on:
    screen.update()
    time.sleep(0.1)
    snake.move()

    #Detecting Collision With Food
    if snake.segments[0].distance(food) < 15:
        food.refresh()
        snake.extend()
        scoreboard.increase_score()


    if snake.head.xcor() > 280 or snake.head.xcor() < -280 or snake.head.ycor() > 280 or snake.head.ycor() < -280:
        is_game_on = False
        scoreboard.game_over()

    #Detecting collision with tail
    for segment in snake.segments:
        if segment == snake.head:
            pass
        elif snake.head.distance(segment) < 5:
            is_game_on = False
            scoreboard.game_over()


screen.exitonclick()

________________________________________________________________________________________________________________________
        
    
  
